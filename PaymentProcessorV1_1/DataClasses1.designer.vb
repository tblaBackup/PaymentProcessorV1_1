'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="NHALoanModule")>  _
Partial Public Class DataClasses1DataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttblCustAcctNum(instance As tblCustAcctNum)
    End Sub
  Partial Private Sub UpdatetblCustAcctNum(instance As tblCustAcctNum)
    End Sub
  Partial Private Sub DeletetblCustAcctNum(instance As tblCustAcctNum)
    End Sub
  Partial Private Sub InserttblPayment(instance As tblPayment)
    End Sub
  Partial Private Sub UpdatetblPayment(instance As tblPayment)
    End Sub
  Partial Private Sub DeletetblPayment(instance As tblPayment)
    End Sub
  Partial Private Sub InserttblAmort(instance As tblAmort)
    End Sub
  Partial Private Sub UpdatetblAmort(instance As tblAmort)
    End Sub
  Partial Private Sub DeletetblAmort(instance As tblAmort)
    End Sub
  Partial Private Sub InserttblCustomer(instance As tblCustomer)
    End Sub
  Partial Private Sub UpdatetblCustomer(instance As tblCustomer)
    End Sub
  Partial Private Sub DeletetblCustomer(instance As tblCustomer)
    End Sub
  Partial Private Sub InserttblLoan(instance As tblLoan)
    End Sub
  Partial Private Sub UpdatetblLoan(instance As tblLoan)
    End Sub
  Partial Private Sub DeletetblLoan(instance As tblLoan)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.PaymentProcessorV1_1.My.MySettings.Default.NHALoanModuleConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tblCustAcctNums() As System.Data.Linq.Table(Of tblCustAcctNum)
		Get
			Return Me.GetTable(Of tblCustAcctNum)
		End Get
	End Property
	
	Public ReadOnly Property CustomersLoans() As System.Data.Linq.Table(Of CustomersLoan)
		Get
			Return Me.GetTable(Of CustomersLoan)
		End Get
	End Property
	
	Public ReadOnly Property tblPayments() As System.Data.Linq.Table(Of tblPayment)
		Get
			Return Me.GetTable(Of tblPayment)
		End Get
	End Property
	
	Public ReadOnly Property CustomerAmorts() As System.Data.Linq.Table(Of CustomerAmort)
		Get
			Return Me.GetTable(Of CustomerAmort)
		End Get
	End Property
	
	Public ReadOnly Property tblAmorts() As System.Data.Linq.Table(Of tblAmort)
		Get
			Return Me.GetTable(Of tblAmort)
		End Get
	End Property
	
	Public ReadOnly Property tblCustomers() As System.Data.Linq.Table(Of tblCustomer)
		Get
			Return Me.GetTable(Of tblCustomer)
		End Get
	End Property
	
	Public ReadOnly Property FullNameCusts() As System.Data.Linq.Table(Of FullNameCust)
		Get
			Return Me.GetTable(Of FullNameCust)
		End Get
	End Property
	
	Public ReadOnly Property tblLoans() As System.Data.Linq.Table(Of tblLoan)
		Get
			Return Me.GetTable(Of tblLoan)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ReturnLastCust", IsComposable:=true)>  _
	Public Function ReturnLastCust() As System.Nullable(Of Integer)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo)).ReturnValue,System.Nullable(Of Integer))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertDataIntoTable")>  _
	Public Function InsertDataIntoTable(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PDate", DbType:="Date")> ByVal pDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PAmount", DbType:="Float")> ByVal pAmount As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LoanID", DbType:="Int")> ByVal loanID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="InterestAmount", DbType:="Float")> ByVal interestAmount As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PrincipalAmount", DbType:="Float")> ByVal principalAmount As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CashID", DbType:="Int")> ByVal cashID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), pDate, pAmount, loanID, interestAmount, principalAmount, cashID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CreateCustomer")>  _
	Public Function CreateCustomer(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CustFName", DbType:="NVarChar(50)")> ByVal custFName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CustLName", DbType:="NVarChar(50)")> ByVal custLName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Addr1", DbType:="NVarChar(50)")> ByVal addr1 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Addr2", DbType:="NVarChar(50)")> ByVal addr2 As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Addr3", DbType:="NVarChar(50)")> ByVal addr3 As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), custFName, custLName, addr1, addr2, addr3)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CreateLoanAccNum")>  _
	Public Function CreateLoanAccNum(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CustomerID", DbType:="Int")> ByVal customerID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AccNo", DbType:="NVarChar(50)")> ByVal accNo As String) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), customerID, accNo)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ReturnLastLoan", IsComposable:=true)>  _
	Public Function ReturnLastLoan() As System.Nullable(Of Integer)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo)).ReturnValue,System.Nullable(Of Integer))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ReturnLastCustAccNum", IsComposable:=true)>  _
	Public Function ReturnLastCustAccNum() As System.Nullable(Of Integer)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo)).ReturnValue,System.Nullable(Of Integer))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CreateAmort")>  _
	Public Function CreateAmort(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LoanID", DbType:="Int")> ByVal loanID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PaymentNumber", DbType:="Int")> ByVal paymentNumber As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PaymentAmount", DbType:="Float")> ByVal paymentAmount As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="InterestAmount", DbType:="Float")> ByVal interestAmount As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PrincipalAmount", DbType:="Float")> ByVal principalAmount As System.Nullable(Of Double)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), loanID, paymentNumber, paymentAmount, interestAmount, principalAmount)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.allCustFullName", IsComposable:=true)>  _
	Public Function allCustFullName() As IQueryable(Of allCustFullNameResult)
		Return Me.CreateMethodCallQuery(Of allCustFullNameResult)(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.CreateLoan")>  _
	Public Function CreateLoan(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LoanPrincipal", DbType:="Float")> ByVal loanPrincipal As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="APR", DbType:="Float")> ByVal aPR As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Term", DbType:="Int")> ByVal term As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="StartDate", DbType:="Date")> ByVal startDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MRC", DbType:="Float")> ByVal mRC As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="CustAccNum", DbType:="Int")> ByVal custAccNum As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ManualAmort", DbType:="Bit")> ByVal manualAmort As System.Nullable(Of Boolean)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), loanPrincipal, aPR, term, startDate, mRC, custAccNum, manualAmort)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertIntoCash")>  _
	Public Function InsertIntoCash(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Payment", DbType:="Float")> ByVal payment As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateSubmitted", DbType:="Date")> ByVal dateSubmitted As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LoanID", DbType:="Int")> ByVal loanID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), payment, dateSubmitted, loanID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ReturnsCashID", IsComposable:=true)>  _
	Public Function ReturnsCashID(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Amt", DbType:="Float")> ByVal amt As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="DateDone", DbType:="Date")> ByVal dateDone As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal loanID As System.Nullable(Of Integer)) As System.Nullable(Of Integer)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), amt, dateDone, loanID).ReturnValue,System.Nullable(Of Integer))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.SumOnHold", IsComposable:=true)>  _
	Public Function SumOnHold(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LoanID", DbType:="Int")> ByVal loanID As System.Nullable(Of Integer)) As System.Nullable(Of Double)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), loanID).ReturnValue,System.Nullable(Of Double))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ReturnPrincipal", IsComposable:=true)>  _
	Public Function ReturnPrincipal(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal loanID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal paymentNumber As System.Nullable(Of Integer)) As System.Nullable(Of Double)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), loanID, paymentNumber).ReturnValue,System.Nullable(Of Double))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ReturnInterest", IsComposable:=true)>  _
	Public Function ReturnInterest(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal loanID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal paymentNumber As System.Nullable(Of Integer)) As System.Nullable(Of Double)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), loanID, paymentNumber).ReturnValue,System.Nullable(Of Double))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ReturnTotalPaymentz", IsComposable:=true)>  _
	Public Function ReturnTotalPaymentz(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LoanID", DbType:="Int")> ByVal loanID As System.Nullable(Of Integer)) As System.Nullable(Of Double)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), loanID).ReturnValue,System.Nullable(Of Double))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ManualAmortTest", IsComposable:=true)>  _
	Public Function ManualAmortTest(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal loanID As System.Nullable(Of Integer)) As System.Nullable(Of Integer)
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), loanID).ReturnValue,System.Nullable(Of Integer))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.InsertIntoHolding")>  _
	Public Function InsertIntoHolding(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Amt", DbType:="Float")> ByVal amt As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal loanID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), amt, loanID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.PrintReceipt")>  _
	Public Function PrintReceipt(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ReceiptID", DbType:="Int")> ByVal receiptID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="PrintDate", DbType:="Date")> ByVal printDate As System.Nullable(Of Date)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), receiptID, printDate)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.UpdateAmountInHolding")>  _
	Public Function UpdateAmountInHolding(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Amount", DbType:="Float")> ByVal amount As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LoanID", DbType:="Int")> ByVal loanID As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), amount, loanID)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ReturnFullNameFromLoanID", IsComposable:=true)>  _
	Public Function ReturnFullNameFromLoanID(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LoanID", DbType:="Int")> ByVal loanID As System.Nullable(Of Integer)) As String
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), loanID).ReturnValue,String)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.ReturnFullAddressFromLoanID", IsComposable:=true)>  _
	Public Function ReturnFullAddressFromLoanID(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LoanID", DbType:="Int")> ByVal loanID As System.Nullable(Of Integer)) As String
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), loanID).ReturnValue,String)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCustAcctNum")>  _
Partial Public Class tblCustAcctNum
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustAcctID As Integer
	
	Private _TBLAAcctID As String
	
	Private _CustomerID As Integer
	
	Private _tblLoans As EntitySet(Of tblLoan)
	
	Private _tblCustomer As EntityRef(Of tblCustomer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustAcctIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustAcctIDChanged()
    End Sub
    Partial Private Sub OnTBLAAcctIDChanging(value As String)
    End Sub
    Partial Private Sub OnTBLAAcctIDChanged()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblLoans = New EntitySet(Of tblLoan)(AddressOf Me.attach_tblLoans, AddressOf Me.detach_tblLoans)
		Me._tblCustomer = CType(Nothing, EntityRef(Of tblCustomer))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustAcctID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CustAcctID() As Integer
		Get
			Return Me._CustAcctID
		End Get
		Set
			If ((Me._CustAcctID = value)  _
						= false) Then
				Me.OnCustAcctIDChanging(value)
				Me.SendPropertyChanging
				Me._CustAcctID = value
				Me.SendPropertyChanged("CustAcctID")
				Me.OnCustAcctIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TBLAAcctID", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property TBLAAcctID() As String
		Get
			Return Me._TBLAAcctID
		End Get
		Set
			If (String.Equals(Me._TBLAAcctID, value) = false) Then
				Me.OnTBLAAcctIDChanging(value)
				Me.SendPropertyChanging
				Me._TBLAAcctID = value
				Me.SendPropertyChanged("TBLAAcctID")
				Me.OnTBLAAcctIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="Int NOT NULL")>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				If Me._tblCustomer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerID = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCustAcctNum_tblLoan", Storage:="_tblLoans", ThisKey:="CustAcctID", OtherKey:="CustomerAcctID")>  _
	Public Property tblLoans() As EntitySet(Of tblLoan)
		Get
			Return Me._tblLoans
		End Get
		Set
			Me._tblLoans.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCustomer_tblCustAcctNum", Storage:="_tblCustomer", ThisKey:="CustomerID", OtherKey:="CustomerID", IsForeignKey:=true)>  _
	Public Property tblCustomer() As tblCustomer
		Get
			Return Me._tblCustomer.Entity
		End Get
		Set
			Dim previousValue As tblCustomer = Me._tblCustomer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblCustomer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblCustomer.Entity = Nothing
					previousValue.tblCustAcctNums.Remove(Me)
				End If
				Me._tblCustomer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblCustAcctNums.Add(Me)
					Me._CustomerID = value.CustomerID
				Else
					Me._CustomerID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblCustomer")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblLoans(ByVal entity As tblLoan)
		Me.SendPropertyChanging
		entity.tblCustAcctNum = Me
	End Sub
	
	Private Sub detach_tblLoans(ByVal entity As tblLoan)
		Me.SendPropertyChanging
		entity.tblCustAcctNum = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CustomersLoans")>  _
Partial Public Class CustomersLoan
	
	Private _LoanID As Integer
	
	Private _TBLAAcctID As String
	
	Private _CustomerID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoanID", DbType:="Int NOT NULL")>  _
	Public Property LoanID() As Integer
		Get
			Return Me._LoanID
		End Get
		Set
			If ((Me._LoanID = value)  _
						= false) Then
				Me._LoanID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TBLAAcctID", DbType:="NChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property TBLAAcctID() As String
		Get
			Return Me._TBLAAcctID
		End Get
		Set
			If (String.Equals(Me._TBLAAcctID, value) = false) Then
				Me._TBLAAcctID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", DbType:="Int NOT NULL")>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				Me._CustomerID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblPayments")>  _
Partial Public Class tblPayment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PaymentID As Integer
	
	Private _PaymentDate As Date
	
	Private _PaymentAmount As Decimal
	
	Private _LoanID As Integer
	
	Private _TowardInterest As Decimal
	
	Private _TowardPrincipal As Decimal
	
	Private _CompletePayment As System.Nullable(Of Char)
	
	Private _CashID As System.Nullable(Of Integer)
	
	Private _tblLoan As EntityRef(Of tblLoan)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPaymentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnPaymentIDChanged()
    End Sub
    Partial Private Sub OnPaymentDateChanging(value As Date)
    End Sub
    Partial Private Sub OnPaymentDateChanged()
    End Sub
    Partial Private Sub OnPaymentAmountChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPaymentAmountChanged()
    End Sub
    Partial Private Sub OnLoanIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLoanIDChanged()
    End Sub
    Partial Private Sub OnTowardInterestChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTowardInterestChanged()
    End Sub
    Partial Private Sub OnTowardPrincipalChanging(value As Decimal)
    End Sub
    Partial Private Sub OnTowardPrincipalChanged()
    End Sub
    Partial Private Sub OnCompletePaymentChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OnCompletePaymentChanged()
    End Sub
    Partial Private Sub OnCashIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCashIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblLoan = CType(Nothing, EntityRef(Of tblLoan))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PaymentID() As Integer
		Get
			Return Me._PaymentID
		End Get
		Set
			If ((Me._PaymentID = value)  _
						= false) Then
				Me.OnPaymentIDChanging(value)
				Me.SendPropertyChanging
				Me._PaymentID = value
				Me.SendPropertyChanged("PaymentID")
				Me.OnPaymentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentDate", DbType:="Date NOT NULL")>  _
	Public Property PaymentDate() As Date
		Get
			Return Me._PaymentDate
		End Get
		Set
			If ((Me._PaymentDate = value)  _
						= false) Then
				Me.OnPaymentDateChanging(value)
				Me.SendPropertyChanging
				Me._PaymentDate = value
				Me.SendPropertyChanged("PaymentDate")
				Me.OnPaymentDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentAmount", DbType:="Decimal(20,2) NOT NULL")>  _
	Public Property PaymentAmount() As Decimal
		Get
			Return Me._PaymentAmount
		End Get
		Set
			If ((Me._PaymentAmount = value)  _
						= false) Then
				Me.OnPaymentAmountChanging(value)
				Me.SendPropertyChanging
				Me._PaymentAmount = value
				Me.SendPropertyChanged("PaymentAmount")
				Me.OnPaymentAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoanID", DbType:="Int NOT NULL")>  _
	Public Property LoanID() As Integer
		Get
			Return Me._LoanID
		End Get
		Set
			If ((Me._LoanID = value)  _
						= false) Then
				If Me._tblLoan.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLoanIDChanging(value)
				Me.SendPropertyChanging
				Me._LoanID = value
				Me.SendPropertyChanged("LoanID")
				Me.OnLoanIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TowardInterest", DbType:="Decimal(20,2) NOT NULL")>  _
	Public Property TowardInterest() As Decimal
		Get
			Return Me._TowardInterest
		End Get
		Set
			If ((Me._TowardInterest = value)  _
						= false) Then
				Me.OnTowardInterestChanging(value)
				Me.SendPropertyChanging
				Me._TowardInterest = value
				Me.SendPropertyChanged("TowardInterest")
				Me.OnTowardInterestChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TowardPrincipal", DbType:="Decimal(20,2) NOT NULL")>  _
	Public Property TowardPrincipal() As Decimal
		Get
			Return Me._TowardPrincipal
		End Get
		Set
			If ((Me._TowardPrincipal = value)  _
						= false) Then
				Me.OnTowardPrincipalChanging(value)
				Me.SendPropertyChanging
				Me._TowardPrincipal = value
				Me.SendPropertyChanged("TowardPrincipal")
				Me.OnTowardPrincipalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompletePayment", DbType:="NChar(1)")>  _
	Public Property CompletePayment() As System.Nullable(Of Char)
		Get
			Return Me._CompletePayment
		End Get
		Set
			If (Me._CompletePayment.Equals(value) = false) Then
				Me.OnCompletePaymentChanging(value)
				Me.SendPropertyChanging
				Me._CompletePayment = value
				Me.SendPropertyChanged("CompletePayment")
				Me.OnCompletePaymentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CashID", DbType:="Int")>  _
	Public Property CashID() As System.Nullable(Of Integer)
		Get
			Return Me._CashID
		End Get
		Set
			If (Me._CashID.Equals(value) = false) Then
				Me.OnCashIDChanging(value)
				Me.SendPropertyChanging
				Me._CashID = value
				Me.SendPropertyChanged("CashID")
				Me.OnCashIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblLoan_tblPayment", Storage:="_tblLoan", ThisKey:="LoanID", OtherKey:="LoanID", IsForeignKey:=true)>  _
	Public Property tblLoan() As tblLoan
		Get
			Return Me._tblLoan.Entity
		End Get
		Set
			Dim previousValue As tblLoan = Me._tblLoan.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblLoan.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblLoan.Entity = Nothing
					previousValue.tblPayments.Remove(Me)
				End If
				Me._tblLoan.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblPayments.Add(Me)
					Me._LoanID = value.LoanID
				Else
					Me._LoanID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblLoan")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CustomerAmort")>  _
Partial Public Class CustomerAmort
	
	Private _PaymentNumber As Integer
	
	Private _PaymentAmount As Double
	
	Private _InterestAmount As Double
	
	Private _PrincipalAmount As Double
	
	Private _CustFName As String
	
	Private _CustLName As String
	
	Private _LoanID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentNumber", DbType:="Int NOT NULL")>  _
	Public Property PaymentNumber() As Integer
		Get
			Return Me._PaymentNumber
		End Get
		Set
			If ((Me._PaymentNumber = value)  _
						= false) Then
				Me._PaymentNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentAmount", DbType:="Float NOT NULL")>  _
	Public Property PaymentAmount() As Double
		Get
			Return Me._PaymentAmount
		End Get
		Set
			If ((Me._PaymentAmount = value)  _
						= false) Then
				Me._PaymentAmount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InterestAmount", DbType:="Float NOT NULL")>  _
	Public Property InterestAmount() As Double
		Get
			Return Me._InterestAmount
		End Get
		Set
			If ((Me._InterestAmount = value)  _
						= false) Then
				Me._InterestAmount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrincipalAmount", DbType:="Float NOT NULL")>  _
	Public Property PrincipalAmount() As Double
		Get
			Return Me._PrincipalAmount
		End Get
		Set
			If ((Me._PrincipalAmount = value)  _
						= false) Then
				Me._PrincipalAmount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustFName", DbType:="NVarChar(50)")>  _
	Public Property CustFName() As String
		Get
			Return Me._CustFName
		End Get
		Set
			If (String.Equals(Me._CustFName, value) = false) Then
				Me._CustFName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustLName", DbType:="NVarChar(50)")>  _
	Public Property CustLName() As String
		Get
			Return Me._CustLName
		End Get
		Set
			If (String.Equals(Me._CustLName, value) = false) Then
				Me._CustLName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoanID", DbType:="Int NOT NULL")>  _
	Public Property LoanID() As Integer
		Get
			Return Me._LoanID
		End Get
		Set
			If ((Me._LoanID = value)  _
						= false) Then
				Me._LoanID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblAmort")>  _
Partial Public Class tblAmort
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _AmortID As Integer
	
	Private _PaymentNumber As Integer
	
	Private _PaymentAmount As Double
	
	Private _InterestAmount As Double
	
	Private _PrincipalAmount As Double
	
	Private _LoanID As Integer
	
	Private _PaymentMAde As Boolean
	
	Private _tblLoan As EntityRef(Of tblLoan)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnAmortIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnAmortIDChanged()
    End Sub
    Partial Private Sub OnPaymentNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnPaymentNumberChanged()
    End Sub
    Partial Private Sub OnPaymentAmountChanging(value As Double)
    End Sub
    Partial Private Sub OnPaymentAmountChanged()
    End Sub
    Partial Private Sub OnInterestAmountChanging(value As Double)
    End Sub
    Partial Private Sub OnInterestAmountChanged()
    End Sub
    Partial Private Sub OnPrincipalAmountChanging(value As Double)
    End Sub
    Partial Private Sub OnPrincipalAmountChanged()
    End Sub
    Partial Private Sub OnLoanIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLoanIDChanged()
    End Sub
    Partial Private Sub OnPaymentMAdeChanging(value As Boolean)
    End Sub
    Partial Private Sub OnPaymentMAdeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblLoan = CType(Nothing, EntityRef(Of tblLoan))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AmortID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property AmortID() As Integer
		Get
			Return Me._AmortID
		End Get
		Set
			If ((Me._AmortID = value)  _
						= false) Then
				Me.OnAmortIDChanging(value)
				Me.SendPropertyChanging
				Me._AmortID = value
				Me.SendPropertyChanged("AmortID")
				Me.OnAmortIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentNumber", DbType:="Int NOT NULL")>  _
	Public Property PaymentNumber() As Integer
		Get
			Return Me._PaymentNumber
		End Get
		Set
			If ((Me._PaymentNumber = value)  _
						= false) Then
				Me.OnPaymentNumberChanging(value)
				Me.SendPropertyChanging
				Me._PaymentNumber = value
				Me.SendPropertyChanged("PaymentNumber")
				Me.OnPaymentNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentAmount", DbType:="Float NOT NULL")>  _
	Public Property PaymentAmount() As Double
		Get
			Return Me._PaymentAmount
		End Get
		Set
			If ((Me._PaymentAmount = value)  _
						= false) Then
				Me.OnPaymentAmountChanging(value)
				Me.SendPropertyChanging
				Me._PaymentAmount = value
				Me.SendPropertyChanged("PaymentAmount")
				Me.OnPaymentAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InterestAmount", DbType:="Float NOT NULL")>  _
	Public Property InterestAmount() As Double
		Get
			Return Me._InterestAmount
		End Get
		Set
			If ((Me._InterestAmount = value)  _
						= false) Then
				Me.OnInterestAmountChanging(value)
				Me.SendPropertyChanging
				Me._InterestAmount = value
				Me.SendPropertyChanged("InterestAmount")
				Me.OnInterestAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrincipalAmount", DbType:="Float NOT NULL")>  _
	Public Property PrincipalAmount() As Double
		Get
			Return Me._PrincipalAmount
		End Get
		Set
			If ((Me._PrincipalAmount = value)  _
						= false) Then
				Me.OnPrincipalAmountChanging(value)
				Me.SendPropertyChanging
				Me._PrincipalAmount = value
				Me.SendPropertyChanged("PrincipalAmount")
				Me.OnPrincipalAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoanID", DbType:="Int NOT NULL")>  _
	Public Property LoanID() As Integer
		Get
			Return Me._LoanID
		End Get
		Set
			If ((Me._LoanID = value)  _
						= false) Then
				If Me._tblLoan.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLoanIDChanging(value)
				Me.SendPropertyChanging
				Me._LoanID = value
				Me.SendPropertyChanged("LoanID")
				Me.OnLoanIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentMAde", DbType:="Bit NOT NULL")>  _
	Public Property PaymentMAde() As Boolean
		Get
			Return Me._PaymentMAde
		End Get
		Set
			If ((Me._PaymentMAde = value)  _
						= false) Then
				Me.OnPaymentMAdeChanging(value)
				Me.SendPropertyChanging
				Me._PaymentMAde = value
				Me.SendPropertyChanged("PaymentMAde")
				Me.OnPaymentMAdeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblLoan_tblAmort", Storage:="_tblLoan", ThisKey:="LoanID", OtherKey:="LoanID", IsForeignKey:=true)>  _
	Public Property tblLoan() As tblLoan
		Get
			Return Me._tblLoan.Entity
		End Get
		Set
			Dim previousValue As tblLoan = Me._tblLoan.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblLoan.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblLoan.Entity = Nothing
					previousValue.tblAmorts.Remove(Me)
				End If
				Me._tblLoan.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblAmorts.Add(Me)
					Me._LoanID = value.LoanID
				Else
					Me._LoanID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblLoan")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCustomer")>  _
Partial Public Class tblCustomer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CustomerID As Integer
	
	Private _CustFName As String
	
	Private _CustLName As String
	
	Private _CustAddress1 As String
	
	Private _CustAddress2 As String
	
	Private _CustAddress3 As String
	
	Private _tblCustAcctNums As EntitySet(Of tblCustAcctNum)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCustomerIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustomerIDChanged()
    End Sub
    Partial Private Sub OnCustFNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustFNameChanged()
    End Sub
    Partial Private Sub OnCustLNameChanging(value As String)
    End Sub
    Partial Private Sub OnCustLNameChanged()
    End Sub
    Partial Private Sub OnCustAddress1Changing(value As String)
    End Sub
    Partial Private Sub OnCustAddress1Changed()
    End Sub
    Partial Private Sub OnCustAddress2Changing(value As String)
    End Sub
    Partial Private Sub OnCustAddress2Changed()
    End Sub
    Partial Private Sub OnCustAddress3Changing(value As String)
    End Sub
    Partial Private Sub OnCustAddress3Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblCustAcctNums = New EntitySet(Of tblCustAcctNum)(AddressOf Me.attach_tblCustAcctNums, AddressOf Me.detach_tblCustAcctNums)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				Me.OnCustomerIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerID = value
				Me.SendPropertyChanged("CustomerID")
				Me.OnCustomerIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustFName", DbType:="NVarChar(50)")>  _
	Public Property CustFName() As String
		Get
			Return Me._CustFName
		End Get
		Set
			If (String.Equals(Me._CustFName, value) = false) Then
				Me.OnCustFNameChanging(value)
				Me.SendPropertyChanging
				Me._CustFName = value
				Me.SendPropertyChanged("CustFName")
				Me.OnCustFNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustLName", DbType:="NVarChar(50)")>  _
	Public Property CustLName() As String
		Get
			Return Me._CustLName
		End Get
		Set
			If (String.Equals(Me._CustLName, value) = false) Then
				Me.OnCustLNameChanging(value)
				Me.SendPropertyChanging
				Me._CustLName = value
				Me.SendPropertyChanged("CustLName")
				Me.OnCustLNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustAddress1", DbType:="NVarChar(50)")>  _
	Public Property CustAddress1() As String
		Get
			Return Me._CustAddress1
		End Get
		Set
			If (String.Equals(Me._CustAddress1, value) = false) Then
				Me.OnCustAddress1Changing(value)
				Me.SendPropertyChanging
				Me._CustAddress1 = value
				Me.SendPropertyChanged("CustAddress1")
				Me.OnCustAddress1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustAddress2", DbType:="NVarChar(50)")>  _
	Public Property CustAddress2() As String
		Get
			Return Me._CustAddress2
		End Get
		Set
			If (String.Equals(Me._CustAddress2, value) = false) Then
				Me.OnCustAddress2Changing(value)
				Me.SendPropertyChanging
				Me._CustAddress2 = value
				Me.SendPropertyChanged("CustAddress2")
				Me.OnCustAddress2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustAddress3", DbType:="NVarChar(50)")>  _
	Public Property CustAddress3() As String
		Get
			Return Me._CustAddress3
		End Get
		Set
			If (String.Equals(Me._CustAddress3, value) = false) Then
				Me.OnCustAddress3Changing(value)
				Me.SendPropertyChanging
				Me._CustAddress3 = value
				Me.SendPropertyChanged("CustAddress3")
				Me.OnCustAddress3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCustomer_tblCustAcctNum", Storage:="_tblCustAcctNums", ThisKey:="CustomerID", OtherKey:="CustomerID")>  _
	Public Property tblCustAcctNums() As EntitySet(Of tblCustAcctNum)
		Get
			Return Me._tblCustAcctNums
		End Get
		Set
			Me._tblCustAcctNums.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblCustAcctNums(ByVal entity As tblCustAcctNum)
		Me.SendPropertyChanging
		entity.tblCustomer = Me
	End Sub
	
	Private Sub detach_tblCustAcctNums(ByVal entity As tblCustAcctNum)
		Me.SendPropertyChanging
		entity.tblCustomer = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FullNameCust")>  _
Partial Public Class FullNameCust
	
	Private _FullName As String
	
	Private _CustomerID As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerID", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property CustomerID() As Integer
		Get
			Return Me._CustomerID
		End Get
		Set
			If ((Me._CustomerID = value)  _
						= false) Then
				Me._CustomerID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblLoan")>  _
Partial Public Class tblLoan
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LoanID As Integer
	
	Private _LoanIPrincipal As Decimal
	
	Private _LoanPPrincipal As Decimal
	
	Private _LoanRateOfInterest As Double
	
	Private _CustomerAcctID As Integer
	
	Private _LoanTerm As System.Nullable(Of Integer)
	
	Private _LoanStartDate As System.Nullable(Of Date)
	
	Private _ManualAmort As System.Nullable(Of Boolean)
	
	Private _MonthlyInstallment As System.Nullable(Of Decimal)
	
	Private _tblPayments As EntitySet(Of tblPayment)
	
	Private _tblAmorts As EntitySet(Of tblAmort)
	
	Private _tblCustAcctNum As EntityRef(Of tblCustAcctNum)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLoanIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLoanIDChanged()
    End Sub
    Partial Private Sub OnLoanIPrincipalChanging(value As Decimal)
    End Sub
    Partial Private Sub OnLoanIPrincipalChanged()
    End Sub
    Partial Private Sub OnLoanPPrincipalChanging(value As Decimal)
    End Sub
    Partial Private Sub OnLoanPPrincipalChanged()
    End Sub
    Partial Private Sub OnLoanRateOfInterestChanging(value As Double)
    End Sub
    Partial Private Sub OnLoanRateOfInterestChanged()
    End Sub
    Partial Private Sub OnCustomerAcctIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCustomerAcctIDChanged()
    End Sub
    Partial Private Sub OnLoanTermChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLoanTermChanged()
    End Sub
    Partial Private Sub OnLoanStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLoanStartDateChanged()
    End Sub
    Partial Private Sub OnManualAmortChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnManualAmortChanged()
    End Sub
    Partial Private Sub OnMonthlyInstallmentChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMonthlyInstallmentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblPayments = New EntitySet(Of tblPayment)(AddressOf Me.attach_tblPayments, AddressOf Me.detach_tblPayments)
		Me._tblAmorts = New EntitySet(Of tblAmort)(AddressOf Me.attach_tblAmorts, AddressOf Me.detach_tblAmorts)
		Me._tblCustAcctNum = CType(Nothing, EntityRef(Of tblCustAcctNum))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoanID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property LoanID() As Integer
		Get
			Return Me._LoanID
		End Get
		Set
			If ((Me._LoanID = value)  _
						= false) Then
				Me.OnLoanIDChanging(value)
				Me.SendPropertyChanging
				Me._LoanID = value
				Me.SendPropertyChanged("LoanID")
				Me.OnLoanIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoanIPrincipal", DbType:="Decimal(20,2) NOT NULL")>  _
	Public Property LoanIPrincipal() As Decimal
		Get
			Return Me._LoanIPrincipal
		End Get
		Set
			If ((Me._LoanIPrincipal = value)  _
						= false) Then
				Me.OnLoanIPrincipalChanging(value)
				Me.SendPropertyChanging
				Me._LoanIPrincipal = value
				Me.SendPropertyChanged("LoanIPrincipal")
				Me.OnLoanIPrincipalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoanPPrincipal", DbType:="Decimal(20,2) NOT NULL")>  _
	Public Property LoanPPrincipal() As Decimal
		Get
			Return Me._LoanPPrincipal
		End Get
		Set
			If ((Me._LoanPPrincipal = value)  _
						= false) Then
				Me.OnLoanPPrincipalChanging(value)
				Me.SendPropertyChanging
				Me._LoanPPrincipal = value
				Me.SendPropertyChanged("LoanPPrincipal")
				Me.OnLoanPPrincipalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoanRateOfInterest", DbType:="Float NOT NULL")>  _
	Public Property LoanRateOfInterest() As Double
		Get
			Return Me._LoanRateOfInterest
		End Get
		Set
			If ((Me._LoanRateOfInterest = value)  _
						= false) Then
				Me.OnLoanRateOfInterestChanging(value)
				Me.SendPropertyChanging
				Me._LoanRateOfInterest = value
				Me.SendPropertyChanged("LoanRateOfInterest")
				Me.OnLoanRateOfInterestChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerAcctID", DbType:="Int NOT NULL")>  _
	Public Property CustomerAcctID() As Integer
		Get
			Return Me._CustomerAcctID
		End Get
		Set
			If ((Me._CustomerAcctID = value)  _
						= false) Then
				If Me._tblCustAcctNum.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCustomerAcctIDChanging(value)
				Me.SendPropertyChanging
				Me._CustomerAcctID = value
				Me.SendPropertyChanged("CustomerAcctID")
				Me.OnCustomerAcctIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoanTerm", DbType:="Int")>  _
	Public Property LoanTerm() As System.Nullable(Of Integer)
		Get
			Return Me._LoanTerm
		End Get
		Set
			If (Me._LoanTerm.Equals(value) = false) Then
				Me.OnLoanTermChanging(value)
				Me.SendPropertyChanging
				Me._LoanTerm = value
				Me.SendPropertyChanged("LoanTerm")
				Me.OnLoanTermChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoanStartDate", DbType:="Date")>  _
	Public Property LoanStartDate() As System.Nullable(Of Date)
		Get
			Return Me._LoanStartDate
		End Get
		Set
			If (Me._LoanStartDate.Equals(value) = false) Then
				Me.OnLoanStartDateChanging(value)
				Me.SendPropertyChanging
				Me._LoanStartDate = value
				Me.SendPropertyChanged("LoanStartDate")
				Me.OnLoanStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ManualAmort", DbType:="Bit")>  _
	Public Property ManualAmort() As System.Nullable(Of Boolean)
		Get
			Return Me._ManualAmort
		End Get
		Set
			If (Me._ManualAmort.Equals(value) = false) Then
				Me.OnManualAmortChanging(value)
				Me.SendPropertyChanging
				Me._ManualAmort = value
				Me.SendPropertyChanged("ManualAmort")
				Me.OnManualAmortChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MonthlyInstallment", DbType:="Decimal(20,2)")>  _
	Public Property MonthlyInstallment() As System.Nullable(Of Decimal)
		Get
			Return Me._MonthlyInstallment
		End Get
		Set
			If (Me._MonthlyInstallment.Equals(value) = false) Then
				Me.OnMonthlyInstallmentChanging(value)
				Me.SendPropertyChanging
				Me._MonthlyInstallment = value
				Me.SendPropertyChanged("MonthlyInstallment")
				Me.OnMonthlyInstallmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblLoan_tblPayment", Storage:="_tblPayments", ThisKey:="LoanID", OtherKey:="LoanID")>  _
	Public Property tblPayments() As EntitySet(Of tblPayment)
		Get
			Return Me._tblPayments
		End Get
		Set
			Me._tblPayments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblLoan_tblAmort", Storage:="_tblAmorts", ThisKey:="LoanID", OtherKey:="LoanID")>  _
	Public Property tblAmorts() As EntitySet(Of tblAmort)
		Get
			Return Me._tblAmorts
		End Get
		Set
			Me._tblAmorts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCustAcctNum_tblLoan", Storage:="_tblCustAcctNum", ThisKey:="CustomerAcctID", OtherKey:="CustAcctID", IsForeignKey:=true)>  _
	Public Property tblCustAcctNum() As tblCustAcctNum
		Get
			Return Me._tblCustAcctNum.Entity
		End Get
		Set
			Dim previousValue As tblCustAcctNum = Me._tblCustAcctNum.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblCustAcctNum.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblCustAcctNum.Entity = Nothing
					previousValue.tblLoans.Remove(Me)
				End If
				Me._tblCustAcctNum.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblLoans.Add(Me)
					Me._CustomerAcctID = value.CustAcctID
				Else
					Me._CustomerAcctID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("tblCustAcctNum")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblPayments(ByVal entity As tblPayment)
		Me.SendPropertyChanging
		entity.tblLoan = Me
	End Sub
	
	Private Sub detach_tblPayments(ByVal entity As tblPayment)
		Me.SendPropertyChanging
		entity.tblLoan = Nothing
	End Sub
	
	Private Sub attach_tblAmorts(ByVal entity As tblAmort)
		Me.SendPropertyChanging
		entity.tblLoan = Me
	End Sub
	
	Private Sub detach_tblAmorts(ByVal entity As tblAmort)
		Me.SendPropertyChanging
		entity.tblLoan = Nothing
	End Sub
End Class

Partial Public Class allCustFullNameResult
	
	Private _FullName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FullName", DbType:="NVarChar(101)")>  _
	Public Property FullName() As String
		Get
			Return Me._FullName
		End Get
		Set
			If (String.Equals(Me._FullName, value) = false) Then
				Me._FullName = value
			End If
		End Set
	End Property
End Class
